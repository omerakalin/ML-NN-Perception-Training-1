class Perceptron:
    def __init__(self, num_features):
        self.weights = np.random.rand(num_features)
        self.bias = np.random.rand()
        
    def predict(self, x):
        activation = np.dot(x, self.weights) + self.bias
        return np.where(activation >= 0, 1, 0)
        
    def train_delta_rule(self, X, y, learning_rate=0.1, num_epochs=100):
        num_samples = X.shape[0]
        num_features = X.shape[1]
        
        for epoch in range(num_epochs):
            for i in range(num_samples):
                x = X[i]
                y_pred = self.predict(x)
                error = y[i] - y_pred
                
                self.weights += learning_rate * error * x
                self.bias += learning_rate * error

